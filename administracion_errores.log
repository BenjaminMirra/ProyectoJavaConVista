[2022-04-1723:32:43] [ ERROR] [GlobalException:29] JSON parse error: Invalid numeric value: Leading zeroes not allowed; nested exception is com.fasterxml.jackson.core.JsonParseException: Invalid numeric value: Leading zeroes not allowed
 at [Source: (org.springframework.util.StreamUtils$NonClosingInputStream); line: 4, column: 17]
[2022-04-1723:32:50] [ ERROR] [GlobalException:29] JSON parse error: Cannot deserialize value of type `java.time.LocalDate` from String "salta": Failed to deserialize java.time.LocalDate: (java.time.format.DateTimeParseException) Text 'salta' could not be parsed at index 0; nested exception is com.fasterxml.jackson.databind.exc.InvalidFormatException: Cannot deserialize value of type `java.time.LocalDate` from String "salta": Failed to deserialize java.time.LocalDate: (java.time.format.DateTimeParseException) Text 'salta' could not be parsed at index 0
 at [Source: (org.springframework.util.StreamUtils$NonClosingInputStream); line: 5, column: 25] (through reference chain: com.integral.integral.entities.Paciente["fechaIngreso"])
[2022-04-1723:33:48] [ ERROR] [GlobalException:29] JSON parse error: Cannot deserialize value of type `java.time.LocalDate` from String "salta": Failed to deserialize java.time.LocalDate: (java.time.format.DateTimeParseException) Text 'salta' could not be parsed at index 0; nested exception is com.fasterxml.jackson.databind.exc.InvalidFormatException: Cannot deserialize value of type `java.time.LocalDate` from String "salta": Failed to deserialize java.time.LocalDate: (java.time.format.DateTimeParseException) Text 'salta' could not be parsed at index 0
 at [Source: (org.springframework.util.StreamUtils$NonClosingInputStream); line: 5, column: 25] (through reference chain: com.integral.integral.entities.Paciente["fechaIngreso"])
[2022-04-1723:33:54] [ ERROR] [GlobalException:29] JSON parse error: Invalid numeric value: Leading zeroes not allowed; nested exception is com.fasterxml.jackson.core.JsonParseException: Invalid numeric value: Leading zeroes not allowed
 at [Source: (org.springframework.util.StreamUtils$NonClosingInputStream); line: 4, column: 17]
[2022-04-1723:34:04] [ ERROR] [GlobalException:29] JSON parse error: Cannot deserialize value of type `java.time.LocalDate` from String "salta": Failed to deserialize java.time.LocalDate: (java.time.format.DateTimeParseException) Text 'salta' could not be parsed at index 0; nested exception is com.fasterxml.jackson.databind.exc.InvalidFormatException: Cannot deserialize value of type `java.time.LocalDate` from String "salta": Failed to deserialize java.time.LocalDate: (java.time.format.DateTimeParseException) Text 'salta' could not be parsed at index 0
 at [Source: (org.springframework.util.StreamUtils$NonClosingInputStream); line: 5, column: 25] (through reference chain: com.integral.integral.entities.Paciente["fechaIngreso"])
[2022-04-1723:34:57] [ ERROR] [GlobalException:29] JSON parse error: Cannot deserialize value of type `java.time.LocalDate` from String "salta": Failed to deserialize java.time.LocalDate: (java.time.format.DateTimeParseException) Text 'salta' could not be parsed at index 0; nested exception is com.fasterxml.jackson.databind.exc.InvalidFormatException: Cannot deserialize value of type `java.time.LocalDate` from String "salta": Failed to deserialize java.time.LocalDate: (java.time.format.DateTimeParseException) Text 'salta' could not be parsed at index 0
 at [Source: (org.springframework.util.StreamUtils$NonClosingInputStream); line: 5, column: 25] (through reference chain: com.integral.integral.entities.Paciente["fechaIngreso"])
[2022-04-1723:35:52] [ ERROR] [GlobalException:29] JSON parse error: Cannot construct instance of `com.integral.integral.entities.Domicilio` (although at least one Creator exists): no int/Int-argument constructor/factory method to deserialize from Number value (1); nested exception is com.fasterxml.jackson.databind.exc.MismatchedInputException: Cannot construct instance of `com.integral.integral.entities.Domicilio` (although at least one Creator exists): no int/Int-argument constructor/factory method to deserialize from Number value (1)
 at [Source: (org.springframework.util.StreamUtils$NonClosingInputStream); line: 6, column: 22] (through reference chain: com.integral.integral.entities.Paciente["domicilio"])
[2022-04-1723:36:04] [ ERROR] [GlobalException:29] JSON parse error: Cannot construct instance of `com.integral.integral.entities.Domicilio` (although at least one Creator exists): no int/Int-argument constructor/factory method to deserialize from Number value (1); nested exception is com.fasterxml.jackson.databind.exc.MismatchedInputException: Cannot construct instance of `com.integral.integral.entities.Domicilio` (although at least one Creator exists): no int/Int-argument constructor/factory method to deserialize from Number value (1)
 at [Source: (org.springframework.util.StreamUtils$NonClosingInputStream); line: 6, column: 22] (through reference chain: com.integral.integral.entities.Paciente["domicilio"])
[2022-04-1723:36:37] [ ERROR] [GlobalException:29] detached entity passed to persist: com.integral.integral.entities.Domicilio; nested exception is org.hibernate.PersistentObjectException: detached entity passed to persist: com.integral.integral.entities.Domicilio
[2022-04-1723:37:06] [ ERROR] [GlobalException:29] detached entity passed to persist: com.integral.integral.entities.Domicilio; nested exception is org.hibernate.PersistentObjectException: detached entity passed to persist: com.integral.integral.entities.Domicilio
[2022-04-1723:37:24] [ ERROR] [GlobalException:29] detached entity passed to persist: com.integral.integral.entities.Domicilio; nested exception is org.hibernate.PersistentObjectException: detached entity passed to persist: com.integral.integral.entities.Domicilio
[2022-04-1723:38:41] [ ERROR] [GlobalException:29] detached entity passed to persist: com.integral.integral.entities.Domicilio; nested exception is org.hibernate.PersistentObjectException: detached entity passed to persist: com.integral.integral.entities.Domicilio
[2022-04-1723:39:04] [ ERROR] [GlobalException:29] detached entity passed to persist: com.integral.integral.entities.Domicilio; nested exception is org.hibernate.PersistentObjectException: detached entity passed to persist: com.integral.integral.entities.Domicilio
[2022-04-1723:39:10] [ ERROR] [GlobalException:29] JSON parse error: Unexpected character ('}' (code 125)): was expecting double-quote to start field name; nested exception is com.fasterxml.jackson.core.JsonParseException: Unexpected character ('}' (code 125)): was expecting double-quote to start field name
 at [Source: (org.springframework.util.StreamUtils$NonClosingInputStream); line: 5, column: 2]
[2022-04-1723:39:32] [ ERROR] [GlobalException:29] detached entity passed to persist: com.integral.integral.entities.Domicilio; nested exception is org.hibernate.PersistentObjectException: detached entity passed to persist: com.integral.integral.entities.Domicilio
[2022-04-1800:19:32] [ ERROR] [GlobalException:29] Failed to convert value of type 'java.lang.String' to required type 'java.lang.Long'; nested exception is java.lang.NumberFormatException: For input string: "id"
[2022-04-1800:21:37] [ ERROR] [GlobalException:29] Failed to convert value of type 'java.lang.String' to required type 'java.lang.Long'; nested exception is java.lang.NumberFormatException: For input string: "index.html"
[2022-04-1800:21:40] [ ERROR] [GlobalException:29] Failed to convert value of type 'java.lang.String' to required type 'java.lang.Long'; nested exception is java.lang.NumberFormatException: For input string: "index"
[2022-04-2021:58:23] [ ERROR] [GlobalException:29] JSON parse error: Unexpected character ('}' (code 125)): was expecting double-quote to start field name; nested exception is com.fasterxml.jackson.core.JsonParseException: Unexpected character ('}' (code 125)): was expecting double-quote to start field name
 at [Source: (org.springframework.util.StreamUtils$NonClosingInputStream); line: 7, column: 2]
[2022-04-2022:25:14] [ ERROR] [GlobalException:29] Required request body is missing: public com.integral.integral.entities.Paciente com.integral.integral.controller.PacienteController.registrarPaciente(com.integral.integral.entities.Paciente)
[2022-04-2022:59:47] [ ERROR] [GlobalException:29] JSON parse error: Cannot deserialize value of type `java.time.LocalDate` from String "01/03/1998": Failed to deserialize java.time.LocalDate: (java.time.format.DateTimeParseException) Text '01/03/1998' could not be parsed at index 0; nested exception is com.fasterxml.jackson.databind.exc.InvalidFormatException: Cannot deserialize value of type `java.time.LocalDate` from String "01/03/1998": Failed to deserialize java.time.LocalDate: (java.time.format.DateTimeParseException) Text '01/03/1998' could not be parsed at index 0
 at [Source: (org.springframework.util.StreamUtils$NonClosingInputStream); line: 1, column: 77] (through reference chain: com.integral.integral.entities.Paciente["fechaIngreso"])
[2022-04-2023:25:51] [ ERROR] [GlobalException:29] JSON parse error: Cannot deserialize value of type `java.time.LocalDate` from String "01/03/1998": Failed to deserialize java.time.LocalDate: (java.time.format.DateTimeParseException) Text '01/03/1998' could not be parsed at index 0; nested exception is com.fasterxml.jackson.databind.exc.InvalidFormatException: Cannot deserialize value of type `java.time.LocalDate` from String "01/03/1998": Failed to deserialize java.time.LocalDate: (java.time.format.DateTimeParseException) Text '01/03/1998' could not be parsed at index 0
 at [Source: (org.springframework.util.StreamUtils$NonClosingInputStream); line: 1, column: 74] (through reference chain: com.integral.integral.entities.Paciente["fechaIngreso"])
[2022-04-2100:10:20] [ ERROR] [GlobalException:29] JSON parse error: Cannot deserialize value of type `int` from String "azul": not a valid `int` value; nested exception is com.fasterxml.jackson.databind.exc.InvalidFormatException: Cannot deserialize value of type `int` from String "azul": not a valid `int` value
 at [Source: (org.springframework.util.StreamUtils$NonClosingInputStream); line: 1, column: 51] (through reference chain: com.integral.integral.entities.Paciente["dni"])
[2022-04-2110:11:13] [ ERROR] [GlobalException:29] Type definition error: [simple type, class org.hibernate.proxy.pojo.bytebuddy.ByteBuddyInterceptor]; nested exception is com.fasterxml.jackson.databind.exc.InvalidDefinitionException: No serializer found for class org.hibernate.proxy.pojo.bytebuddy.ByteBuddyInterceptor and no properties discovered to create BeanSerializer (to avoid exception, disable SerializationFeature.FAIL_ON_EMPTY_BEANS) (through reference chain: java.util.ArrayList[0]->com.integral.integral.entities.Turno["paciente"]->com.integral.integral.entities.Paciente$HibernateProxy$qcEHWby4["hibernateLazyInitializer"])
[2022-04-2110:11:18] [ ERROR] [GlobalException:29] Type definition error: [simple type, class org.hibernate.proxy.pojo.bytebuddy.ByteBuddyInterceptor]; nested exception is com.fasterxml.jackson.databind.exc.InvalidDefinitionException: No serializer found for class org.hibernate.proxy.pojo.bytebuddy.ByteBuddyInterceptor and no properties discovered to create BeanSerializer (to avoid exception, disable SerializationFeature.FAIL_ON_EMPTY_BEANS) (through reference chain: java.util.ArrayList[0]->com.integral.integral.entities.Turno["paciente"]->com.integral.integral.entities.Paciente$HibernateProxy$qcEHWby4["hibernateLazyInitializer"])
[2022-04-2110:11:28] [ ERROR] [GlobalException:29] Type definition error: [simple type, class org.hibernate.proxy.pojo.bytebuddy.ByteBuddyInterceptor]; nested exception is com.fasterxml.jackson.databind.exc.InvalidDefinitionException: No serializer found for class org.hibernate.proxy.pojo.bytebuddy.ByteBuddyInterceptor and no properties discovered to create BeanSerializer (to avoid exception, disable SerializationFeature.FAIL_ON_EMPTY_BEANS) (through reference chain: java.util.ArrayList[0]->com.integral.integral.entities.Turno["paciente"]->com.integral.integral.entities.Paciente$HibernateProxy$qcEHWby4["hibernateLazyInitializer"])
[2022-04-2110:12:48] [ ERROR] [GlobalException:29] Type definition error: [simple type, class org.hibernate.proxy.pojo.bytebuddy.ByteBuddyInterceptor]; nested exception is com.fasterxml.jackson.databind.exc.InvalidDefinitionException: No serializer found for class org.hibernate.proxy.pojo.bytebuddy.ByteBuddyInterceptor and no properties discovered to create BeanSerializer (to avoid exception, disable SerializationFeature.FAIL_ON_EMPTY_BEANS) (through reference chain: java.util.ArrayList[0]->com.integral.integral.entities.Turno["paciente"]->com.integral.integral.entities.Paciente$HibernateProxy$qcEHWby4["hibernateLazyInitializer"])
[2022-04-2110:13:04] [ ERROR] [GlobalException:29] Type definition error: [simple type, class org.hibernate.proxy.pojo.bytebuddy.ByteBuddyInterceptor]; nested exception is com.fasterxml.jackson.databind.exc.InvalidDefinitionException: No serializer found for class org.hibernate.proxy.pojo.bytebuddy.ByteBuddyInterceptor and no properties discovered to create BeanSerializer (to avoid exception, disable SerializationFeature.FAIL_ON_EMPTY_BEANS) (through reference chain: java.util.ArrayList[0]->com.integral.integral.entities.Turno["paciente"]->com.integral.integral.entities.Paciente$HibernateProxy$qcEHWby4["hibernateLazyInitializer"])
[2022-04-2110:13:06] [ ERROR] [GlobalException:29] Type definition error: [simple type, class org.hibernate.proxy.pojo.bytebuddy.ByteBuddyInterceptor]; nested exception is com.fasterxml.jackson.databind.exc.InvalidDefinitionException: No serializer found for class org.hibernate.proxy.pojo.bytebuddy.ByteBuddyInterceptor and no properties discovered to create BeanSerializer (to avoid exception, disable SerializationFeature.FAIL_ON_EMPTY_BEANS) (through reference chain: java.util.ArrayList[0]->com.integral.integral.entities.Turno["paciente"]->com.integral.integral.entities.Paciente$HibernateProxy$qcEHWby4["hibernateLazyInitializer"])
[2022-04-2110:13:12] [ ERROR] [GlobalException:29] Type definition error: [simple type, class org.hibernate.proxy.pojo.bytebuddy.ByteBuddyInterceptor]; nested exception is com.fasterxml.jackson.databind.exc.InvalidDefinitionException: No serializer found for class org.hibernate.proxy.pojo.bytebuddy.ByteBuddyInterceptor and no properties discovered to create BeanSerializer (to avoid exception, disable SerializationFeature.FAIL_ON_EMPTY_BEANS) (through reference chain: java.util.ArrayList[0]->com.integral.integral.entities.Turno["paciente"]->com.integral.integral.entities.Paciente$HibernateProxy$qcEHWby4["hibernateLazyInitializer"])
[2022-04-2110:13:15] [ ERROR] [GlobalException:29] Type definition error: [simple type, class org.hibernate.proxy.pojo.bytebuddy.ByteBuddyInterceptor]; nested exception is com.fasterxml.jackson.databind.exc.InvalidDefinitionException: No serializer found for class org.hibernate.proxy.pojo.bytebuddy.ByteBuddyInterceptor and no properties discovered to create BeanSerializer (to avoid exception, disable SerializationFeature.FAIL_ON_EMPTY_BEANS) (through reference chain: java.util.ArrayList[0]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["paciente"]->com.integral.integral.entities.Paciente$HibernateProxy$qcEHWby4["hibernateLazyInitializer"])
[2022-04-2110:13:17] [ ERROR] [GlobalException:29] Type definition error: [simple type, class org.hibernate.proxy.pojo.bytebuddy.ByteBuddyInterceptor]; nested exception is com.fasterxml.jackson.databind.exc.InvalidDefinitionException: No serializer found for class org.hibernate.proxy.pojo.bytebuddy.ByteBuddyInterceptor and no properties discovered to create BeanSerializer (to avoid exception, disable SerializationFeature.FAIL_ON_EMPTY_BEANS) (through reference chain: java.util.ArrayList[0]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["paciente"]->com.integral.integral.entities.Paciente$HibernateProxy$qcEHWby4["hibernateLazyInitializer"])
[2022-04-2110:13:25] [ ERROR] [GlobalException:29] Type definition error: [simple type, class org.hibernate.proxy.pojo.bytebuddy.ByteBuddyInterceptor]; nested exception is com.fasterxml.jackson.databind.exc.InvalidDefinitionException: No serializer found for class org.hibernate.proxy.pojo.bytebuddy.ByteBuddyInterceptor and no properties discovered to create BeanSerializer (to avoid exception, disable SerializationFeature.FAIL_ON_EMPTY_BEANS) (through reference chain: java.util.ArrayList[0]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["paciente"]->com.integral.integral.entities.Paciente$HibernateProxy$qcEHWby4["hibernateLazyInitializer"])
[2022-04-2110:15:23] [ ERROR] [GlobalException:29] Type definition error: [simple type, class org.hibernate.proxy.pojo.bytebuddy.ByteBuddyInterceptor]; nested exception is com.fasterxml.jackson.databind.exc.InvalidDefinitionException: No serializer found for class org.hibernate.proxy.pojo.bytebuddy.ByteBuddyInterceptor and no properties discovered to create BeanSerializer (to avoid exception, disable SerializationFeature.FAIL_ON_EMPTY_BEANS) (through reference chain: java.util.ArrayList[0]->com.integral.integral.entities.Turno["paciente"]->com.integral.integral.entities.Paciente$HibernateProxy$zqHGjyXV["hibernateLazyInitializer"])
[2022-04-2110:15:27] [ ERROR] [GlobalException:29] Type definition error: [simple type, class org.hibernate.proxy.pojo.bytebuddy.ByteBuddyInterceptor]; nested exception is com.fasterxml.jackson.databind.exc.InvalidDefinitionException: No serializer found for class org.hibernate.proxy.pojo.bytebuddy.ByteBuddyInterceptor and no properties discovered to create BeanSerializer (to avoid exception, disable SerializationFeature.FAIL_ON_EMPTY_BEANS) (through reference chain: java.util.ArrayList[0]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["paciente"]->com.integral.integral.entities.Paciente$HibernateProxy$zqHGjyXV["hibernateLazyInitializer"])
[2022-04-2110:17:13] [ ERROR] [GlobalException:29] Type definition error: [simple type, class org.hibernate.proxy.pojo.bytebuddy.ByteBuddyInterceptor]; nested exception is com.fasterxml.jackson.databind.exc.InvalidDefinitionException: No serializer found for class org.hibernate.proxy.pojo.bytebuddy.ByteBuddyInterceptor and no properties discovered to create BeanSerializer (to avoid exception, disable SerializationFeature.FAIL_ON_EMPTY_BEANS) (through reference chain: java.util.ArrayList[0]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["paciente"]->com.integral.integral.entities.Paciente$HibernateProxy$WVxnE5iR["hibernateLazyInitializer"])
[2022-04-2110:17:16] [ ERROR] [GlobalException:29] Type definition error: [simple type, class org.hibernate.proxy.pojo.bytebuddy.ByteBuddyInterceptor]; nested exception is com.fasterxml.jackson.databind.exc.InvalidDefinitionException: No serializer found for class org.hibernate.proxy.pojo.bytebuddy.ByteBuddyInterceptor and no properties discovered to create BeanSerializer (to avoid exception, disable SerializationFeature.FAIL_ON_EMPTY_BEANS) (through reference chain: java.util.ArrayList[0]->com.integral.integral.entities.Turno["paciente"]->com.integral.integral.entities.Paciente$HibernateProxy$WVxnE5iR["hibernateLazyInitializer"])
[2022-04-2110:17:21] [ ERROR] [GlobalException:29] Type definition error: [simple type, class org.hibernate.proxy.pojo.bytebuddy.ByteBuddyInterceptor]; nested exception is com.fasterxml.jackson.databind.exc.InvalidDefinitionException: No serializer found for class org.hibernate.proxy.pojo.bytebuddy.ByteBuddyInterceptor and no properties discovered to create BeanSerializer (to avoid exception, disable SerializationFeature.FAIL_ON_EMPTY_BEANS) (through reference chain: java.util.ArrayList[0]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["paciente"]->com.integral.integral.entities.Paciente$HibernateProxy$WVxnE5iR["hibernateLazyInitializer"])
[2022-04-2110:17:23] [ ERROR] [GlobalException:29] Type definition error: [simple type, class org.hibernate.proxy.pojo.bytebuddy.ByteBuddyInterceptor]; nested exception is com.fasterxml.jackson.databind.exc.InvalidDefinitionException: No serializer found for class org.hibernate.proxy.pojo.bytebuddy.ByteBuddyInterceptor and no properties discovered to create BeanSerializer (to avoid exception, disable SerializationFeature.FAIL_ON_EMPTY_BEANS) (through reference chain: java.util.ArrayList[0]->com.integral.integral.entities.Turno["paciente"]->com.integral.integral.entities.Paciente$HibernateProxy$WVxnE5iR["hibernateLazyInitializer"])
[2022-04-2110:17:28] [ ERROR] [GlobalException:29] Type definition error: [simple type, class org.hibernate.proxy.pojo.bytebuddy.ByteBuddyInterceptor]; nested exception is com.fasterxml.jackson.databind.exc.InvalidDefinitionException: No serializer found for class org.hibernate.proxy.pojo.bytebuddy.ByteBuddyInterceptor and no properties discovered to create BeanSerializer (to avoid exception, disable SerializationFeature.FAIL_ON_EMPTY_BEANS) (through reference chain: java.util.ArrayList[0]->com.integral.integral.entities.Turno["paciente"]->com.integral.integral.entities.Paciente$HibernateProxy$WVxnE5iR["hibernateLazyInitializer"])
[2022-04-2110:21:01] [ ERROR] [GlobalException:29] Type definition error: [simple type, class org.hibernate.proxy.pojo.bytebuddy.ByteBuddyInterceptor]; nested exception is com.fasterxml.jackson.databind.exc.InvalidDefinitionException: No serializer found for class org.hibernate.proxy.pojo.bytebuddy.ByteBuddyInterceptor and no properties discovered to create BeanSerializer (to avoid exception, disable SerializationFeature.FAIL_ON_EMPTY_BEANS) (through reference chain: java.util.ArrayList[0]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["paciente"]->com.integral.integral.entities.Paciente$HibernateProxy$PPzdsl2V["hibernateLazyInitializer"])
[2022-04-2110:21:11] [ ERROR] [GlobalException:29] Type definition error: [simple type, class org.hibernate.proxy.pojo.bytebuddy.ByteBuddyInterceptor]; nested exception is com.fasterxml.jackson.databind.exc.InvalidDefinitionException: No serializer found for class org.hibernate.proxy.pojo.bytebuddy.ByteBuddyInterceptor and no properties discovered to create BeanSerializer (to avoid exception, disable SerializationFeature.FAIL_ON_EMPTY_BEANS) (through reference chain: java.util.ArrayList[0]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["paciente"]->com.integral.integral.entities.Paciente$HibernateProxy$PPzdsl2V["hibernateLazyInitializer"])
[2022-04-2110:21:13] [ ERROR] [GlobalException:29] Type definition error: [simple type, class org.hibernate.proxy.pojo.bytebuddy.ByteBuddyInterceptor]; nested exception is com.fasterxml.jackson.databind.exc.InvalidDefinitionException: No serializer found for class org.hibernate.proxy.pojo.bytebuddy.ByteBuddyInterceptor and no properties discovered to create BeanSerializer (to avoid exception, disable SerializationFeature.FAIL_ON_EMPTY_BEANS) (through reference chain: java.util.ArrayList[0]->com.integral.integral.entities.Turno["paciente"]->com.integral.integral.entities.Paciente$HibernateProxy$PPzdsl2V["hibernateLazyInitializer"])
[2022-04-2110:24:04] [ ERROR] [GlobalException:29] Type definition error: [simple type, class org.hibernate.proxy.pojo.bytebuddy.ByteBuddyInterceptor]; nested exception is com.fasterxml.jackson.databind.exc.InvalidDefinitionException: No serializer found for class org.hibernate.proxy.pojo.bytebuddy.ByteBuddyInterceptor and no properties discovered to create BeanSerializer (to avoid exception, disable SerializationFeature.FAIL_ON_EMPTY_BEANS) (through reference chain: java.util.ArrayList[0]->com.integral.integral.entities.Turno["paciente"]->com.integral.integral.entities.Paciente$HibernateProxy$POlKIkKo["hibernateLazyInitializer"])
[2022-04-2110:25:03] [ ERROR] [GlobalException:29] Type definition error: [simple type, class org.hibernate.proxy.pojo.bytebuddy.ByteBuddyInterceptor]; nested exception is com.fasterxml.jackson.databind.exc.InvalidDefinitionException: No serializer found for class org.hibernate.proxy.pojo.bytebuddy.ByteBuddyInterceptor and no properties discovered to create BeanSerializer (to avoid exception, disable SerializationFeature.FAIL_ON_EMPTY_BEANS) (through reference chain: java.util.ArrayList[0]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["paciente"]->com.integral.integral.entities.Paciente$HibernateProxy$POlKIkKo["hibernateLazyInitializer"])
[2022-04-2110:25:15] [ ERROR] [GlobalException:29] Type definition error: [simple type, class org.hibernate.proxy.pojo.bytebuddy.ByteBuddyInterceptor]; nested exception is com.fasterxml.jackson.databind.exc.InvalidDefinitionException: No serializer found for class org.hibernate.proxy.pojo.bytebuddy.ByteBuddyInterceptor and no properties discovered to create BeanSerializer (to avoid exception, disable SerializationFeature.FAIL_ON_EMPTY_BEANS) (through reference chain: java.util.ArrayList[0]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["paciente"]->com.integral.integral.entities.Paciente$HibernateProxy$POlKIkKo["hibernateLazyInitializer"])
[2022-04-2111:17:33] [ ERROR] [GlobalException:29] JSON parse error: Cannot construct instance of `com.integral.integral.entities.Odontologo` (although at least one Creator exists): no String-argument constructor/factory method to deserialize from String value ('1'); nested exception is com.fasterxml.jackson.databind.exc.MismatchedInputException: Cannot construct instance of `com.integral.integral.entities.Odontologo` (although at least one Creator exists): no String-argument constructor/factory method to deserialize from String value ('1')
 at [Source: (org.springframework.util.StreamUtils$NonClosingInputStream); line: 1, column: 36] (through reference chain: com.integral.integral.entities.Turno["odontologo"])
[2022-04-2111:18:03] [ ERROR] [GlobalException:29] JSON parse error: Cannot construct instance of `com.integral.integral.entities.Odontologo` (although at least one Creator exists): no String-argument constructor/factory method to deserialize from String value ('4'); nested exception is com.fasterxml.jackson.databind.exc.MismatchedInputException: Cannot construct instance of `com.integral.integral.entities.Odontologo` (although at least one Creator exists): no String-argument constructor/factory method to deserialize from String value ('4')
 at [Source: (org.springframework.util.StreamUtils$NonClosingInputStream); line: 1, column: 36] (through reference chain: com.integral.integral.entities.Turno["odontologo"])
[2022-04-2111:20:18] [ ERROR] [GlobalException:29] JSON parse error: Cannot construct instance of `com.integral.integral.entities.Odontologo` (although at least one Creator exists): no String-argument constructor/factory method to deserialize from String value ('4'); nested exception is com.fasterxml.jackson.databind.exc.MismatchedInputException: Cannot construct instance of `com.integral.integral.entities.Odontologo` (although at least one Creator exists): no String-argument constructor/factory method to deserialize from String value ('4')
 at [Source: (org.springframework.util.StreamUtils$NonClosingInputStream); line: 1, column: 36] (through reference chain: com.integral.integral.entities.Turno["odontologo"])
[2022-04-2111:24:24] [ ERROR] [GlobalException:29] Type definition error: [simple type, class org.hibernate.proxy.pojo.bytebuddy.ByteBuddyInterceptor]; nested exception is com.fasterxml.jackson.databind.exc.InvalidDefinitionException: No serializer found for class org.hibernate.proxy.pojo.bytebuddy.ByteBuddyInterceptor and no properties discovered to create BeanSerializer (to avoid exception, disable SerializationFeature.FAIL_ON_EMPTY_BEANS) (through reference chain: java.util.ArrayList[0]->com.integral.integral.entities.Turno["paciente"]->com.integral.integral.entities.Paciente$HibernateProxy$VgOEKmmj["hibernateLazyInitializer"])
[2022-04-2111:24:28] [ ERROR] [GlobalException:29] Type definition error: [simple type, class org.hibernate.proxy.pojo.bytebuddy.ByteBuddyInterceptor]; nested exception is com.fasterxml.jackson.databind.exc.InvalidDefinitionException: No serializer found for class org.hibernate.proxy.pojo.bytebuddy.ByteBuddyInterceptor and no properties discovered to create BeanSerializer (to avoid exception, disable SerializationFeature.FAIL_ON_EMPTY_BEANS) (through reference chain: java.util.ArrayList[0]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["paciente"]->com.integral.integral.entities.Paciente$HibernateProxy$VgOEKmmj["hibernateLazyInitializer"])
[2022-04-2111:24:34] [ ERROR] [GlobalException:29] Type definition error: [simple type, class org.hibernate.proxy.pojo.bytebuddy.ByteBuddyInterceptor]; nested exception is com.fasterxml.jackson.databind.exc.InvalidDefinitionException: No serializer found for class org.hibernate.proxy.pojo.bytebuddy.ByteBuddyInterceptor and no properties discovered to create BeanSerializer (to avoid exception, disable SerializationFeature.FAIL_ON_EMPTY_BEANS) (through reference chain: java.util.ArrayList[0]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["paciente"]->com.integral.integral.entities.Paciente$HibernateProxy$VgOEKmmj["hibernateLazyInitializer"])
[2022-04-2111:24:36] [ ERROR] [GlobalException:29] Type definition error: [simple type, class org.hibernate.proxy.pojo.bytebuddy.ByteBuddyInterceptor]; nested exception is com.fasterxml.jackson.databind.exc.InvalidDefinitionException: No serializer found for class org.hibernate.proxy.pojo.bytebuddy.ByteBuddyInterceptor and no properties discovered to create BeanSerializer (to avoid exception, disable SerializationFeature.FAIL_ON_EMPTY_BEANS) (through reference chain: java.util.ArrayList[0]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["paciente"]->com.integral.integral.entities.Paciente$HibernateProxy$VgOEKmmj["hibernateLazyInitializer"])
[2022-04-2111:24:41] [ ERROR] [GlobalException:29] Type definition error: [simple type, class org.hibernate.proxy.pojo.bytebuddy.ByteBuddyInterceptor]; nested exception is com.fasterxml.jackson.databind.exc.InvalidDefinitionException: No serializer found for class org.hibernate.proxy.pojo.bytebuddy.ByteBuddyInterceptor and no properties discovered to create BeanSerializer (to avoid exception, disable SerializationFeature.FAIL_ON_EMPTY_BEANS) (through reference chain: java.util.ArrayList[0]->com.integral.integral.entities.Turno["paciente"]->com.integral.integral.entities.Paciente$HibernateProxy$VgOEKmmj["hibernateLazyInitializer"])
[2022-04-2111:24:46] [ ERROR] [GlobalException:29] Type definition error: [simple type, class org.hibernate.proxy.pojo.bytebuddy.ByteBuddyInterceptor]; nested exception is com.fasterxml.jackson.databind.exc.InvalidDefinitionException: No serializer found for class org.hibernate.proxy.pojo.bytebuddy.ByteBuddyInterceptor and no properties discovered to create BeanSerializer (to avoid exception, disable SerializationFeature.FAIL_ON_EMPTY_BEANS) (through reference chain: java.util.ArrayList[0]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["paciente"]->com.integral.integral.entities.Paciente$HibernateProxy$VgOEKmmj["hibernateLazyInitializer"])
[2022-04-2111:34:24] [ ERROR] [GlobalException:29] JSON parse error: Cannot deserialize value of type `int` from String "azul": not a valid `int` value; nested exception is com.fasterxml.jackson.databind.exc.InvalidFormatException: Cannot deserialize value of type `int` from String "azul": not a valid `int` value
 at [Source: (org.springframework.util.StreamUtils$NonClosingInputStream); line: 1, column: 85] (through reference chain: com.integral.integral.entities.Paciente["dni"])
[2022-04-2121:57:42] [ ERROR] [GlobalException:29] Type definition error: [simple type, class org.hibernate.proxy.pojo.bytebuddy.ByteBuddyInterceptor]; nested exception is com.fasterxml.jackson.databind.exc.InvalidDefinitionException: No serializer found for class org.hibernate.proxy.pojo.bytebuddy.ByteBuddyInterceptor and no properties discovered to create BeanSerializer (to avoid exception, disable SerializationFeature.FAIL_ON_EMPTY_BEANS) (through reference chain: java.util.ArrayList[0]->com.integral.integral.entities.Turno["paciente"]->com.integral.integral.entities.Paciente$HibernateProxy$8kAOEqzg["hibernateLazyInitializer"])
[2022-04-2121:58:46] [ ERROR] [GlobalException:29] Type definition error: [simple type, class org.hibernate.proxy.pojo.bytebuddy.ByteBuddyInterceptor]; nested exception is com.fasterxml.jackson.databind.exc.InvalidDefinitionException: No serializer found for class org.hibernate.proxy.pojo.bytebuddy.ByteBuddyInterceptor and no properties discovered to create BeanSerializer (to avoid exception, disable SerializationFeature.FAIL_ON_EMPTY_BEANS) (through reference chain: java.util.ArrayList[0]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["paciente"]->com.integral.integral.entities.Paciente$HibernateProxy$8kAOEqzg["hibernateLazyInitializer"])
[2022-04-2122:00:17] [ ERROR] [GlobalException:29] JSON parse error: Cannot construct instance of `com.integral.integral.entities.Odontologo` (although at least one Creator exists): no String-argument constructor/factory method to deserialize from String value ('4'); nested exception is com.fasterxml.jackson.databind.exc.MismatchedInputException: Cannot construct instance of `com.integral.integral.entities.Odontologo` (although at least one Creator exists): no String-argument constructor/factory method to deserialize from String value ('4')
 at [Source: (org.springframework.util.StreamUtils$NonClosingInputStream); line: 1, column: 36] (through reference chain: com.integral.integral.entities.Turno["odontologo"])
[2022-04-2122:03:27] [ ERROR] [GlobalException:29] Type definition error: [simple type, class org.hibernate.proxy.pojo.bytebuddy.ByteBuddyInterceptor]; nested exception is com.fasterxml.jackson.databind.exc.InvalidDefinitionException: No serializer found for class org.hibernate.proxy.pojo.bytebuddy.ByteBuddyInterceptor and no properties discovered to create BeanSerializer (to avoid exception, disable SerializationFeature.FAIL_ON_EMPTY_BEANS) (through reference chain: java.util.ArrayList[0]->com.integral.integral.entities.Turno["paciente"]->com.integral.integral.entities.Paciente$HibernateProxy$TGwuSNwJ["hibernateLazyInitializer"])
[2022-04-2122:03:36] [ ERROR] [GlobalException:29] Type definition error: [simple type, class org.hibernate.proxy.pojo.bytebuddy.ByteBuddyInterceptor]; nested exception is com.fasterxml.jackson.databind.exc.InvalidDefinitionException: No serializer found for class org.hibernate.proxy.pojo.bytebuddy.ByteBuddyInterceptor and no properties discovered to create BeanSerializer (to avoid exception, disable SerializationFeature.FAIL_ON_EMPTY_BEANS) (through reference chain: java.util.ArrayList[0]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["paciente"]->com.integral.integral.entities.Paciente$HibernateProxy$TGwuSNwJ["hibernateLazyInitializer"])
[2022-04-2122:06:01] [ ERROR] [GlobalException:29] Type definition error: [simple type, class org.hibernate.proxy.pojo.bytebuddy.ByteBuddyInterceptor]; nested exception is com.fasterxml.jackson.databind.exc.InvalidDefinitionException: No serializer found for class org.hibernate.proxy.pojo.bytebuddy.ByteBuddyInterceptor and no properties discovered to create BeanSerializer (to avoid exception, disable SerializationFeature.FAIL_ON_EMPTY_BEANS) (through reference chain: java.util.ArrayList[0]->com.integral.integral.entities.Turno["paciente"]->com.integral.integral.entities.Paciente$HibernateProxy$dJaGes8T["hibernateLazyInitializer"])
[2022-04-2122:06:15] [ ERROR] [GlobalException:29] Type definition error: [simple type, class org.hibernate.proxy.pojo.bytebuddy.ByteBuddyInterceptor]; nested exception is com.fasterxml.jackson.databind.exc.InvalidDefinitionException: No serializer found for class org.hibernate.proxy.pojo.bytebuddy.ByteBuddyInterceptor and no properties discovered to create BeanSerializer (to avoid exception, disable SerializationFeature.FAIL_ON_EMPTY_BEANS) (through reference chain: java.util.ArrayList[0]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["paciente"]->com.integral.integral.entities.Paciente$HibernateProxy$dJaGes8T["hibernateLazyInitializer"])
[2022-04-2122:07:41] [ ERROR] [GlobalException:29] Could not write JSON: Infinite recursion (StackOverflowError); nested exception is com.fasterxml.jackson.databind.JsonMappingException: Infinite recursion (StackOverflowError) (through reference chain: com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"]->com.integral.integral.entities.Odontologo["turnos"]->org.hibernate.collection.internal.PersistentSet[0]->com.integral.integral.entities.Turno["odontologo"])
[2022-04-2122:25:44] [ ERROR] [GlobalException:29] JSON parse error: Cannot construct instance of `com.integral.integral.entities.Odontologo` (although at least one Creator exists): no String-argument constructor/factory method to deserialize from String value ('2'); nested exception is com.fasterxml.jackson.databind.exc.MismatchedInputException: Cannot construct instance of `com.integral.integral.entities.Odontologo` (although at least one Creator exists): no String-argument constructor/factory method to deserialize from String value ('2')
 at [Source: (org.springframework.util.StreamUtils$NonClosingInputStream); line: 1, column: 36] (through reference chain: com.integral.integral.entities.Turno["odontologo"])
[2022-04-2122:25:51] [ ERROR] [GlobalException:29] JSON parse error: Cannot construct instance of `com.integral.integral.entities.Odontologo` (although at least one Creator exists): no String-argument constructor/factory method to deserialize from String value ('2'); nested exception is com.fasterxml.jackson.databind.exc.MismatchedInputException: Cannot construct instance of `com.integral.integral.entities.Odontologo` (although at least one Creator exists): no String-argument constructor/factory method to deserialize from String value ('2')
 at [Source: (org.springframework.util.StreamUtils$NonClosingInputStream); line: 1, column: 36] (through reference chain: com.integral.integral.entities.Turno["odontologo"])
[2022-04-2122:31:12] [ ERROR] [GlobalException:29] JSON parse error: Cannot construct instance of `com.integral.integral.entities.Odontologo` (although at least one Creator exists): no String-argument constructor/factory method to deserialize from String value ('1'); nested exception is com.fasterxml.jackson.databind.exc.MismatchedInputException: Cannot construct instance of `com.integral.integral.entities.Odontologo` (although at least one Creator exists): no String-argument constructor/factory method to deserialize from String value ('1')
 at [Source: (org.springframework.util.StreamUtils$NonClosingInputStream); line: 1, column: 36] (through reference chain: com.integral.integral.entities.Turno["odontologo"])
[2022-04-2122:31:19] [ ERROR] [GlobalException:29] JSON parse error: Cannot deserialize value of type `java.time.LocalDate` from String "1": Failed to deserialize java.time.LocalDate: (java.time.format.DateTimeParseException) Text '1' could not be parsed at index 0; nested exception is com.fasterxml.jackson.databind.exc.InvalidFormatException: Cannot deserialize value of type `java.time.LocalDate` from String "1": Failed to deserialize java.time.LocalDate: (java.time.format.DateTimeParseException) Text '1' could not be parsed at index 0
 at [Source: (org.springframework.util.StreamUtils$NonClosingInputStream); line: 1, column: 10] (through reference chain: com.integral.integral.entities.Turno["fecha"])
[2022-04-2122:32:57] [ ERROR] [GlobalException:29] JSON parse error: Cannot construct instance of `com.integral.integral.entities.Odontologo` (although at least one Creator exists): no String-argument constructor/factory method to deserialize from String value ('1'); nested exception is com.fasterxml.jackson.databind.exc.MismatchedInputException: Cannot construct instance of `com.integral.integral.entities.Odontologo` (although at least one Creator exists): no String-argument constructor/factory method to deserialize from String value ('1')
 at [Source: (org.springframework.util.StreamUtils$NonClosingInputStream); line: 1, column: 36] (through reference chain: com.integral.integral.entities.Turno["odontologo"])
[2022-04-2122:42:09] [ ERROR] [GlobalException:29] The given id must not be null!; nested exception is java.lang.IllegalArgumentException: The given id must not be null!
[2022-04-2122:48:12] [ ERROR] [GlobalException:29] JSON parse error: Cannot construct instance of `com.integral.integral.entities.Odontologo` (although at least one Creator exists): no String-argument constructor/factory method to deserialize from String value ('1'); nested exception is com.fasterxml.jackson.databind.exc.MismatchedInputException: Cannot construct instance of `com.integral.integral.entities.Odontologo` (although at least one Creator exists): no String-argument constructor/factory method to deserialize from String value ('1')
 at [Source: (org.springframework.util.StreamUtils$NonClosingInputStream); line: 1, column: 36] (through reference chain: com.integral.integral.entities.Turno["odontologo"])
[2022-04-2122:48:26] [ ERROR] [GlobalException:29] JSON parse error: Cannot construct instance of `com.integral.integral.entities.Odontologo` (although at least one Creator exists): no String-argument constructor/factory method to deserialize from String value ('1'); nested exception is com.fasterxml.jackson.databind.exc.MismatchedInputException: Cannot construct instance of `com.integral.integral.entities.Odontologo` (although at least one Creator exists): no String-argument constructor/factory method to deserialize from String value ('1')
 at [Source: (org.springframework.util.StreamUtils$NonClosingInputStream); line: 1, column: 36] (through reference chain: com.integral.integral.entities.Turno["odontologo"])
[2022-04-2123:10:29] [ ERROR] [GlobalException:29] The given id must not be null!; nested exception is java.lang.IllegalArgumentException: The given id must not be null!
[2022-04-2123:10:37] [ ERROR] [GlobalException:29] The given id must not be null!; nested exception is java.lang.IllegalArgumentException: The given id must not be null!
[2022-04-2123:10:51] [ ERROR] [GlobalException:29] The given id must not be null!; nested exception is java.lang.IllegalArgumentException: The given id must not be null!
[2022-04-2123:12:23] [ ERROR] [GlobalException:29] JSON parse error: Cannot deserialize value of type `java.time.LocalDate` from String "1": Failed to deserialize java.time.LocalDate: (java.time.format.DateTimeParseException) Text '1' could not be parsed at index 0; nested exception is com.fasterxml.jackson.databind.exc.InvalidFormatException: Cannot deserialize value of type `java.time.LocalDate` from String "1": Failed to deserialize java.time.LocalDate: (java.time.format.DateTimeParseException) Text '1' could not be parsed at index 0
 at [Source: (org.springframework.util.StreamUtils$NonClosingInputStream); line: 1, column: 10] (through reference chain: com.integral.integral.entities.Turno["fecha"])
[2022-04-2123:12:44] [ ERROR] [GlobalException:29] The given id must not be null!; nested exception is java.lang.IllegalArgumentException: The given id must not be null!
[2022-04-2123:14:22] [ ERROR] [GlobalException:29] The given id must not be null!; nested exception is java.lang.IllegalArgumentException: The given id must not be null!
[2022-04-2123:16:56] [ ERROR] [GlobalException:29] The given id must not be null!; nested exception is java.lang.IllegalArgumentException: The given id must not be null!
[2022-04-2123:19:43] [ ERROR] [GlobalException:29] The given id must not be null!; nested exception is java.lang.IllegalArgumentException: The given id must not be null!
[2022-04-2123:23:16] [ ERROR] [GlobalException:29] The given id must not be null!; nested exception is java.lang.IllegalArgumentException: The given id must not be null!
[2022-04-2123:25:12] [ ERROR] [GlobalException:29] The given id must not be null!; nested exception is java.lang.IllegalArgumentException: The given id must not be null!
[2022-04-2123:25:17] [ ERROR] [GlobalException:29] The given id must not be null!; nested exception is java.lang.IllegalArgumentException: The given id must not be null!
[2022-04-2123:25:50] [ ERROR] [GlobalException:29] Unable to find com.integral.integral.entities.Paciente with id 2; nested exception is javax.persistence.EntityNotFoundException: Unable to find com.integral.integral.entities.Paciente with id 2
[2022-04-2200:03:37] [ ERROR] [GlobalException:29] No default constructor for entity:  : com.integral.integral.entities.Turno; nested exception is org.hibernate.InstantiationException: No default constructor for entity:  : com.integral.integral.entities.Turno
[2022-04-2200:05:16] [ ERROR] [GlobalException:29] No default constructor for entity:  : com.integral.integral.entities.Turno; nested exception is org.hibernate.InstantiationException: No default constructor for entity:  : com.integral.integral.entities.Turno
[2022-04-2200:05:22] [ ERROR] [GlobalException:29] No default constructor for entity:  : com.integral.integral.entities.Turno; nested exception is org.hibernate.InstantiationException: No default constructor for entity:  : com.integral.integral.entities.Turno
[2022-04-2200:06:47] [ ERROR] [GlobalException:29] No default constructor for entity:  : com.integral.integral.entities.Turno; nested exception is org.hibernate.InstantiationException: No default constructor for entity:  : com.integral.integral.entities.Turno
[2022-04-2200:09:07] [ ERROR] [GlobalException:29] No default constructor for entity:  : com.integral.integral.entities.Turno; nested exception is org.hibernate.InstantiationException: No default constructor for entity:  : com.integral.integral.entities.Turno
[2022-04-2200:10:35] [ ERROR] [GlobalException:29] No default constructor for entity:  : com.integral.integral.entities.Turno; nested exception is org.hibernate.InstantiationException: No default constructor for entity:  : com.integral.integral.entities.Turno
[2022-04-2200:12:24] [ ERROR] [GlobalException:29] No default constructor for entity:  : com.integral.integral.entities.Turno; nested exception is org.hibernate.InstantiationException: No default constructor for entity:  : com.integral.integral.entities.Turno
[2022-04-2200:14:04] [ ERROR] [GlobalException:29] No default constructor for entity:  : com.integral.integral.entities.Turno; nested exception is org.hibernate.InstantiationException: No default constructor for entity:  : com.integral.integral.entities.Turno
[2022-04-2200:14:21] [ ERROR] [GlobalException:29] No default constructor for entity:  : com.integral.integral.entities.Turno; nested exception is org.hibernate.InstantiationException: No default constructor for entity:  : com.integral.integral.entities.Turno
[2022-04-2200:14:31] [ ERROR] [GlobalException:29] No default constructor for entity:  : com.integral.integral.entities.Turno; nested exception is org.hibernate.InstantiationException: No default constructor for entity:  : com.integral.integral.entities.Turno
[2022-04-2200:17:23] [ ERROR] [GlobalException:29] No default constructor for entity:  : com.integral.integral.entities.Turno; nested exception is org.hibernate.InstantiationException: No default constructor for entity:  : com.integral.integral.entities.Turno
[2022-04-2200:20:10] [ ERROR] [GlobalException:29] No default constructor for entity:  : com.integral.integral.entities.Turno; nested exception is org.hibernate.InstantiationException: No default constructor for entity:  : com.integral.integral.entities.Turno
[2022-04-2200:21:55] [ ERROR] [GlobalException:29] No default constructor for entity:  : com.integral.integral.entities.Turno; nested exception is org.hibernate.InstantiationException: No default constructor for entity:  : com.integral.integral.entities.Turno
[2022-04-2200:24:38] [ ERROR] [GlobalException:29] No default constructor for entity:  : com.integral.integral.entities.Turno; nested exception is org.hibernate.InstantiationException: No default constructor for entity:  : com.integral.integral.entities.Turno
[2022-04-2200:27:01] [ ERROR] [GlobalException:29] No default constructor for entity:  : com.integral.integral.entities.Turno; nested exception is org.hibernate.InstantiationException: No default constructor for entity:  : com.integral.integral.entities.Turno
[2022-04-2200:29:08] [ ERROR] [GlobalException:29] No default constructor for entity:  : com.integral.integral.entities.Turno; nested exception is org.hibernate.InstantiationException: No default constructor for entity:  : com.integral.integral.entities.Turno
[2022-04-2200:30:26] [ ERROR] [GlobalException:29] No default constructor for entity:  : com.integral.integral.entities.Turno; nested exception is org.hibernate.InstantiationException: No default constructor for entity:  : com.integral.integral.entities.Turno
[2022-04-2200:32:11] [ ERROR] [GlobalException:29] No default constructor for entity:  : com.integral.integral.entities.Turno; nested exception is org.hibernate.InstantiationException: No default constructor for entity:  : com.integral.integral.entities.Turno
[2022-04-2200:32:54] [ ERROR] [GlobalException:29] No default constructor for entity:  : com.integral.integral.entities.Turno; nested exception is org.hibernate.InstantiationException: No default constructor for entity:  : com.integral.integral.entities.Turno
[2022-04-2200:33:01] [ ERROR] [GlobalException:29] No default constructor for entity:  : com.integral.integral.entities.Turno; nested exception is org.hibernate.InstantiationException: No default constructor for entity:  : com.integral.integral.entities.Turno
[2022-04-2200:38:51] [ ERROR] [GlobalException:29] No default constructor for entity:  : com.integral.integral.entities.Turno; nested exception is org.hibernate.InstantiationException: No default constructor for entity:  : com.integral.integral.entities.Turno
[2022-04-2200:40:12] [ ERROR] [GlobalException:29] No default constructor for entity:  : com.integral.integral.entities.Turno; nested exception is org.hibernate.InstantiationException: No default constructor for entity:  : com.integral.integral.entities.Turno
[2022-04-2200:42:11] [ ERROR] [GlobalException:29] No default constructor for entity:  : com.integral.integral.entities.Turno; nested exception is org.hibernate.InstantiationException: No default constructor for entity:  : com.integral.integral.entities.Turno
[2022-04-2200:43:12] [ ERROR] [GlobalException:29] No default constructor for entity:  : com.integral.integral.entities.Turno; nested exception is org.hibernate.InstantiationException: No default constructor for entity:  : com.integral.integral.entities.Turno
[2022-04-2200:44:02] [ ERROR] [GlobalException:29] No default constructor for entity:  : com.integral.integral.entities.Turno; nested exception is org.hibernate.InstantiationException: No default constructor for entity:  : com.integral.integral.entities.Turno
[2022-04-2200:47:27] [ ERROR] [GlobalException:29] No default constructor for entity:  : com.integral.integral.entities.Turno; nested exception is org.hibernate.InstantiationException: No default constructor for entity:  : com.integral.integral.entities.Turno
[2022-04-2200:52:08] [ ERROR] [GlobalException:29] No default constructor for entity:  : com.integral.integral.entities.Turno; nested exception is org.hibernate.InstantiationException: No default constructor for entity:  : com.integral.integral.entities.Turno
[2022-04-2200:53:22] [ ERROR] [GlobalException:29] No default constructor for entity:  : com.integral.integral.entities.Turno; nested exception is org.hibernate.InstantiationException: No default constructor for entity:  : com.integral.integral.entities.Turno
[2022-04-2200:58:38] [ ERROR] [GlobalException:29] No default constructor for entity:  : com.integral.integral.entities.Turno; nested exception is org.hibernate.InstantiationException: No default constructor for entity:  : com.integral.integral.entities.Turno
[2022-04-2201:04:19] [ ERROR] [GlobalException:29] No default constructor for entity:  : com.integral.integral.entities.Turno; nested exception is org.hibernate.InstantiationException: No default constructor for entity:  : com.integral.integral.entities.Turno
[2022-04-2218:32:23] [ ERROR] [GlobalException:29] JSON parse error: Cannot deserialize value of type `java.time.LocalDate` from String "2022-05-02¡¡10": Failed to deserialize java.time.LocalDate: (java.time.format.DateTimeParseException) Text '2022-05-02¡¡10' could not be parsed, unparsed text found at index 10; nested exception is com.fasterxml.jackson.databind.exc.InvalidFormatException: Cannot deserialize value of type `java.time.LocalDate` from String "2022-05-02¡¡10": Failed to deserialize java.time.LocalDate: (java.time.format.DateTimeParseException) Text '2022-05-02¡¡10' could not be parsed, unparsed text found at index 10
 at [Source: (org.springframework.util.StreamUtils$NonClosingInputStream); line: 1, column: 65] (through reference chain: com.integral.integral.entities.Turno["fecha"])
